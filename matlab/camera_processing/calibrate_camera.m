%% Extract frame form video
a = VideoReader('/Users/jalpanchal/drive/penn/robo599/simulator_media/0429/calibration/gp_0429_calib_1.MP4');
out_path = "/Users/jalpanchal/drive/penn/robo599/simulator_media/0429/calibration/";
for img = 1:3;
    filename=strcat(out_path,'frame',num2str(img),'_',date{1}(1:end-1),'.jpg');
    b = read(a, img);
%     imshow(b);
    imwrite(b,filename);
end
%% Run cameraCalibrator to get camera param
% Auto-generated by cameraCalibrator app on 05-May-2021
%-------------------------------------------------------


% Define images to process
imageFileNames = {'/Users/jalpanchal/drive/penn/robo599/simulator_media/0429/calibration/frame1_0429.jpg',...
    '/Users/jalpanchal/drive/penn/robo599/simulator_media/0429/calibration/frame2_0429.jpg',...
    '/Users/jalpanchal/drive/penn/robo599/simulator_media/0429/calibration/frame3_0429.jpg',...
    };
% Detect checkerboards in images
[imagePoints, boardSize, imagesUsed] = detectCheckerboardPoints(imageFileNames);
imageFileNames = imageFileNames(imagesUsed);

% Read the first image to obtain image size
originalImage = imread(imageFileNames{1});
[mrows, ncols, ~] = size(originalImage);

% Generate world coordinates of the corners of the squares
squareSize = 25;  % in units of 'millimeters'
worldPoints = generateCheckerboardPoints(boardSize, squareSize);

% Calibrate the camera
[cameraParams, imagesUsed, estimationErrors] = estimateCameraParameters(imagePoints, worldPoints, ...
    'EstimateSkew', false, 'EstimateTangentialDistortion', false, ...
    'NumRadialDistortionCoefficients', 2, 'WorldUnits', 'millimeters', ...
    'InitialIntrinsicMatrix', [], 'InitialRadialDistortion', [], ...
    'ImageSize', [mrows, ncols]);

% View reprojection errors
% h1=figure; showReprojectionErrors(cameraParams);

% Visualize pattern locations
% h2=figure; showExtrinsics(cameraParams, 'CameraCentric');

% Display parameter estimation errors
displayErrors(estimationErrors, cameraParams);

% For example, you can use the calibration data to remove effects of lens distortion.
% undistortedImage = undistortImage(originalImage, cameraParams);

% See additional examples of how to use the calibration data.  At the prompt type:
% showdemo('MeasuringPlanarObjectsExample')
% showdemo('StructureFromMotionExample')
%% Compute R and T
[undistortedImage, newOrigin] = undistortImage(originalImage, cameraParams);
[imagePoints, boardSize] = detectCheckerboardPoints(originalImage);
imagePoints = imagePoints + newOrigin; % adds newOrigin to every row of imagePoints
[R, t] = extrinsics(imagePoints, worldPoints, cameraParams)

%% Translate to World coordinated

